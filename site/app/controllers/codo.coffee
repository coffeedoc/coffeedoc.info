Codo = require 'codo'
Mongoose = require 'mongoose'

Project = require './../models/project'
File    = require './../models/file'

# Controller for Codo resources, either static ones
# provided by Codo or dynamic, project specific files
# that have been generated by Codo and stored into MongoDB.
#
module.exports = class CodoController

  # Show a Codo generated file.
  #
  @show: (req, res) ->
    path = req.params[0]

    # Provide index.html functionality
    unless /(\.html|\.js|\.css)$/.test path
      if /\/$/.test path
        path += 'index.html'
      else
        return res.redirect "/github/#{ path }/"

    # Locate Codo file resource
    File.findOne { path: path }, 'content', (err, doc) ->
      if err || !doc
        res.render 'not_found', { url: req.url }
      else
        # Detect content type
        switch path
          when /\/.js$/   then res.header 'Content-Type', 'application/javascript'
          when /\/.css$/  then res.header 'Content-Type', 'text/css'
          when /\/.html$/ then res.header 'Content-Type', 'text/html'

        res.send doc.content

  # Redirect to the first project version Codo documentation
  #
  @latest: (req, res) ->
    user    = req.params.user
    project = req.params.project

    Project.findOne { user: user, project: project }, 'versions', (err, doc) ->
      if err || !doc
        res.send 404
      else
        res.redirect "/github/#{ user }/#{ project }/#{ doc.versions.shift() }/"

  # Serve the Codo JavasSripts file.
  #
  @script: (req, res) ->
    res.header 'Content-Type', 'application/javascript'
    res.send Codo.script()

  # Serve Codo stylesheet file.
  #
  @style: (req, res) ->
    res.header 'Content-Type', 'text/css'
    res.send Codo.style()
